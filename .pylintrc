[MASTER]
#required-header=Name of the file\n@Author: .*\n@version: .*\n@Date: .*\n@Creation : .*\nInstructions: .*
#load-plugins=pylint.checkers.imports

[MAIN]

# Always return a 0 (non-error) status code, even if lint errors are found.
# This is primarily useful in continuous integration scripts.
exit-zero=yes


# Use multiple processes to speed up Pylint. Specifying 0 will auto-detect the
# number of processors available to use, and will cap the count on Windows to
# avoid hangs.
# We changed the number of jobs to 0 as it speeds up the pylint process
jobs=0


# Minimum Python version to use for version dependent checks. Will default to
# the version used to run pylint.
py-version=3.9

# Just in case we want to use the verbose function, we will leave it here
, accessible, as a recommendation.
# In verbose mode, extra non-checker-related info will be displayed.
#verbose=


[BASIC]

# Naming style matching correct argument names.
argument-naming-style=snake_case

# Naming style matching correct attribute names.
attr-naming-style=snake_case


# Bad variable names which should always be refused, separated by a comma.
bad-names=foo,
          bar,
          baz,
          toto,
          tutu,
          tata,
          con


# Naming style matching correct class constant names.
class-const-naming-style=camelCase

# Naming style matching correct class names.
class-naming-style=UPPER_CASE

# Naming style matching correct constant names.
const-naming-style=camelCase

# Minimum line length for functions/classes that require docstrings, shorter
# ones are exempt.
docstring-min-length=100000000

# Naming style matching correct function names.
function-naming-style=Pascal_Snake_Case


# Good variable names which should always be accepted, separated by a comma.
good-names=i,
           j,
           k,
           ex,
           Run,
           elem,
           id,
           l,


# Naming style matching correct method names.
method-naming-style=Pascal_Snake_Case


# Naming style matching correct module names.
module-naming-style=snake_case


# Naming style matching correct variable names.
variable-naming-style=snake_case

# Regular expression matching correct variable names. Overrides variable-
# naming-style. If left empty, variable names will be checked with the set
# naming style.
variable-rgx= [a-zA-Z][a-zA-Z0-9_]*



[DESIGN]


# Maximum number of arguments for function / method.
max-args=10

# Maximum number of boolean expressions in an if statement (see R0916).
max-bool-expr=8



[FORMAT]


# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines=^\s*(# )?<?https?://\S+>?$

# String used as indentation unit. This is usually "    " (4 spaces) or "\t" (1
# tab).
indent-string="\t"

# Maximum number of characters on a single line.
max-line-length=80


[IMPORTS]

# Alphabetical order for imports
import-order-style=smarkets

# List of modules that can be imported at any level, not just the top level
# one.
allow-any-import-level=yes


[LOGGING]



[MISCELLANEOUS]

# List of note tags to take in consideration, separated by a comma.
notes=FIXME,
      XXX,
      TODO,
      HAZME,
      PARAHACER



[SPELLING]


# List of comma separated words that should not be checked.
spelling-ignore-words=Eduardo, Alarcón, Sergio, Barragán, UC3M


[VARIABLES]

# A regular expression matching the name of dummy variables (i.e. expected to
# not be used).
dummy-variables-rgx=_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_


# Tells whether we should check for unused import in __init__ files.
#init-import=no

